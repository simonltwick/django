# Generated by Django 5.2.3 on 2025-09-11 21:07

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import routes.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('routes', '0001_initial'), ('routes', '0002_delete_track'), ('routes', '0003_track'), ('routes', '0004_auto_20250528_2029'), ('routes', '0005_rawgpx'), ('routes', '0006_track_raw_gpx_id'), ('routes', '0007_rename_marker_place'), ('routes', '0008_placetype_place_type'), ('routes', '0009_placetype_icon'), ('routes', '0010_alter_place_type'), ('routes', '0011_placetype_user_alter_place_type'), ('routes', '0012_alter_place_type'), ('routes', '0013_place_user_rawgpx_user_track_user'), ('routes', '0014_preferences'), ('routes', '0015_preference_delete_preferences'), ('routes', '0016_track_ascent_track_end_time_track_moving_distance_and_more'), ('routes', '0017_alter_track_ascent_alter_track_moving_distance_and_more'), ('routes', '0018_track_unique_name'), ('routes', '0019_tag_alter_place_type_place_tag_track_tag'), ('routes', '0020_tag_user'), ('routes', '0021_track_creator_track_description_alter_placetype_icon_and_more'), ('routes', '0022_alter_tag_name'), ('routes', '0023_remove_track_raw_gpx_id_delete_rawgpx'), ('routes', '0024_boundary')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('icon', models.CharField(choices=[('Beer', 'cup-straw-pink.svg'), ('Coffee', 'cup-orange.svg'), ('Tea', 'teapot-brown-web.svg'), ('Place', 'geo-green.svg'), ('Camera', 'camera-yellow.svg'), ('Bullseye', 'bullseye-blue.svg')], default='geo-green.svg', max_length=30)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='routes_preference', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('distance_units', models.IntegerField(choices=[(10, 'Miles'), (20, 'Kilometres')], default=20)),
                ('track_nearby_search_distance', models.FloatField(default=5)),
                ('track_search_result_limit', models.IntegerField(default=100)),
                ('place_nearby_search_distance', models.FloatField(default=20)),
                ('place_search_result_limit', models.IntegerField(default=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_collation='NOCASE', max_length=20, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('type', models.ForeignKey(default=routes.models.get_default_place_type_pk, on_delete=django.db.models.deletion.PROTECT, to='routes.placetype')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tag', models.ManyToManyField(related_name='place', to='routes.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('track', django.contrib.gis.db.models.fields.MultiLineStringField(dim=3, srid=4326)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ascent', models.FloatField(blank=True, help_text='Ascent in metres', null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('moving_distance', models.FloatField(blank=True, help_text='Moving distance in metres', null=True)),
                ('moving_time', models.FloatField(blank=True, help_text='Moving time in seconds', null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('tag', models.ManyToManyField(related_name='track', to='routes.tag')),
                ('creator', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'name'), name='unique_name')],
            },
        ),
        migrations.CreateModel(
            name='Boundary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(db_collation='NOCASE', max_length=40)),
                ('name', models.CharField(db_collation='NOCASE', max_length=40)),
                ('polygon', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Boundaries',
                'constraints': [models.UniqueConstraint(fields=('user', 'category', 'name'), name='unique_boundary')],
            },
        ),
    ]
